import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState, useCallback } from "react";
import VideoComponent from "~/components/VideoComponent";
import { api } from "~/utils/api";

export default function Home() {
  const router = useRouter();
  const [isMounted, setIsMounted] = useState(false);

  // Ensure the component only renders on the client
  useEffect(() => {
    setIsMounted(true);
  }, []);

  const isLogged = useRef(false); // Use a ref to persist the logged state
  const addLog = api.web.addLog.useMutation();
  const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const logIP = useCallback(async () => {
    if (isLogged.current) return; // Exit if already logged
    try {
      const initialPage = window.location.pathname; // Capture initial page name

      const response = await fetch('/api/get-ip');
      const data = await response.json() as { ip: string }; // Ensure data has the correct type
      console.log('IP:', data.ip);

      await delay(2000); // 2-second delay

      // Check if user is still on the same page
      const currentPage = window.location.pathname;
      if (initialPage === currentPage) {
        await addLog.mutateAsync({ ipAddress: data.ip, pageName: initialPage });
        console.log('IP logged successfully');
        isLogged.current = true; // Set to true after logging
      } else {
        console.log('User navigated to a different page. Logging aborted.');
      }
    } catch (error) {
      console.error('Failed to log IP:', error);
    }
  }, [addLog]);

  useEffect(() => {
    logIP().catch(console.error); // Handle promise to avoid no-floating-promises error
  }, [logIP]);

  return (
    <>
      <Head>
        <title>Capture Incridea</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/images/favicon/favicon.ico" />
      </Head>
      <div className="flex flex-col min-h-screen">
        {/* Section 1: Main Hero Section */}
        <div
          className="relative h-screen bg-cover bg-center"
          style={{ backgroundImage: "url('/images/hero-bg.png')" }}
        >
          <div className="absolute inset-0 bg-black bg-opacity-60" />
          <div className="relative z-10 h-full flex items-center justify-between p-10">
            {/* Conditionally render the video only on the client */}
            <div className="flex-shrink-0 px-8">
              {isMounted && <VideoComponent />}
            </div>
            {/* Tagline and Description */}
            <div className="flex flex-col text-white max-w-2xl text-left gap-8">
              <h1 className="font-silkscreen text-5xl font-extrabold mb-4">
                Your Memories, Our Passion
              </h1>
              <p className="text-lg">
                Get your event photos and story-worthy moments. Experience them the same day! <br />
                <span className="font-bold">captures.incridea.in</span> has it all!
              </p>
            </div>
          </div>
        </div>
        {/* Section 2: Experience Animation Section */}
        <div
          className="relative h-screen bg-cover bg-center"
          style={{ backgroundImage: "url('./images/experience-bg.png')" }}
        >
          <div className="absolute inset-0 bg-black bg-opacity-50" />
          <div className="relative z-10 flex flex-col items-center justify-center h-full text-center">
            <h2 className="text-4xl md:text-6xl text-white font-extrabold mb-8 animate-bounce">
              Experience captures.incridea.in
            </h2>
            <button
              onClick={() => void router.push("/captures")}
              className="px-8 py-4 text-lg bg-white text-black font-bold rounded hover:bg-gray-200 transition"
            >
              Go to Captures
            </button>
          </div>
        </div>
      </div>     
      {/* </main> */}

    </>
  );
}
