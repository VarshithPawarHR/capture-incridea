generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RemovalRequestStatus {
  pending
  declined
  approved
}

model RemovalRequest {
  id          Int                   @id @default(autoincrement())
  name        String
  idcard      String
  description String
  image_path  String
  email       String
  status      RemovalRequestStatus  @default(pending)
}

model events {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  description       String
  shortDescription  String   // New field for short description
  image             String
  type              EventType
  day               Day
  visibility        State
}


enum EventType {
  core
  technical
  nontechnical
  special
}

enum Day {
  day1
  day2
  day3
}

enum State {
  active
  inactive  
}

enum Teamgroup {
  media
  digital
  socialmedia
  developer
  none
}

enum position {
  mediahead
  mediacohead
  leadvideographer
  leadphotographer
  photographer
  videographer
  aerialvideographer
  socialmediahead
  socialmediacohead
  socialmediateam
  frontenddev
  backenddev
  fullstackdev
  digitalhead
  digitalcohead
  digitalteam
  none
}

model team {
  id            Int     @id @default(autoincrement())
  name          String
  committee    Teamgroup
  designation  position
  image         String
  say           String
}



model webAnalytics {
  id         Int      @id @default(autoincrement())
  ip_address String
  page_name  String
  date_time  DateTime @default(now())
}

model downloadLog {
  id         Int      @id @default(autoincrement())
  ip_address String
  date_time  DateTime @default(now())
  file_path  String
}

model auditLog {
  id                Int      @id @default(autoincrement())
  user              String
  audit_description String
  date_time         DateTime @default(now())
}

model Gallery {
  id         Int      @id @default(autoincrement())
  image_path String
  event_name String
  event_category String
  date_time  DateTime @default(now())
}

model Stories {
  id         Int      @id @default(autoincrement())
  event_name String
  date_time  DateTime @default(now())
  file_path  String
}

enum Role {
  admin
  manager
  editor
  user
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role Role @default(user)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

