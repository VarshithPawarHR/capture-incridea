generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model RemovalRequest {
  id          Int    @id @default(autoincrement())
  name        String
  idcard      String
  description String
  image_path  String
  email       String
  status      Status @default(pending)
}

model events {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  description      String
  shortDescription String
  image            String
  type             EventType
  day              Day
  visibility       State
}

model team {
  id          Int       @id @default(autoincrement())
  name        String
  committee   Teamgroup
  designation String
  image       String
  say         String
}

model webAnalytics {
  id           Int      @id @default(autoincrement())
  session_user String
  uniqueId     String
  routePath    String
  isChecked    String
  timer        Int?
  startPing    DateTime
  lastPing     DateTime
}

model downloadLog {
  id           Int      @id @default(autoincrement())
  session_user String
  date_time    DateTime @default(now())
  file_path    String
}

model Gallery {
  id             Int      @id @default(autoincrement())
  image_path     String
  event_name     String?
  event_category String
  upload_type    String
  state          Status
  date_time      DateTime @default(now())
}

model Smcuploads {
  id          Int      @id @default(autoincrement())
  video_path  String
  description String
  author      String
  date_time   DateTime @default(now())
}

model Stories {
  id            Int      @id @default(autoincrement())
  video_path    String
  category_name String
  date_time     DateTime @default(now())
}

model storycategories {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CaptureCard {
  id        Int      @id @default(autoincrement())
  cardName  String
  cardState State
  cardRtime DateTime
}

model Variables {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model CaptureLike {
  id           Int     @id @default(autoincrement())
  capturePath  String
  session_user String
  like         Boolean
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  sessionUserName String
  dateTime        DateTime @default(now())
  description     String
}

model VerifiedEmail {
  id    Int    @id @default(autoincrement())
  email String
}

enum Status {
  pending
  declined
  approved
}

enum EventType {
  core
  technical
  nontechnical
  special
}

enum Day {
  day1
  day2
  day3
}

enum State {
  active
  inactive
}

enum Teamgroup {
  media
  socialmedia
  developer
  none
}

enum Role {
  admin
  manager
  editor
  user
  smc
}
